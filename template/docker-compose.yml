services:
  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ambev-frontend
    ports:
      - "4200:80"
    depends_on:
      - api
    networks:
      - ambev-network
    restart: unless-stopped

  # Backend API service
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ambev-api
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=ambev_db;Username=ambev_user;Password=${DB_PASSWORD:-strong_password}
      - ConnectionStrings__RabbitMQ=amqp://ambev_user:${RABBITMQ_PASSWORD:-strong_password}@rabbitmq:5672
      - Jwt__SecretKey=${JWT_SECRET:-YourSuperSecretKeyForJwtTokenGenerationThatShouldBeAtLeast32BytesLong}
      - MessageBroker__QueueName=ambev_events
      - MessageBroker__RabbitMQ__HostName=rabbitmq
      - MessageBroker__RabbitMQ__Port=5672
      - MessageBroker__RabbitMQ__UserName=ambev_user
      - MessageBroker__RabbitMQ__Password=${RABBITMQ_PASSWORD:-strong_password}
      - MessageBroker__RabbitMQ__ExchangeName=ambev_events
      - Redis__ConnectionString=redis:6379,password=${REDIS_PASSWORD:-strong_password}
    networks:
      - ambev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database service
  postgres:
    image: postgres:15-alpine
    container_name: ambev-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=ambev_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-strong_password}
      - POSTGRES_DB=ambev_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - ambev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ambev_user -d ambev_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Message broker service
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: ambev-rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=ambev_user
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-strong_password}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - ambev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache service
  redis:
    image: redis:alpine
    container_name: ambev-redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-strong_password}
    volumes:
      - redis-data:/data
    networks:
      - ambev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-strong_password}", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  ambev-network:
    driver: bridge

volumes:
  postgres-data:
  rabbitmq-data:
  redis-data: 